# Generate a password of X chars - defaults to 15 chars
# For less complicated or more diverse passwords, change the regex character class [:graph:]
# refer to https://petefreitag.com/cheatsheets/regex/character-classes/ (thanks Peter)
#
function generate-password() {
  local DEFCHARS EXNUM1 EXNUM2 CCOUNT PCOUNT;
  PCOUNT=1; CCOUNT=1; EXNUM2=$(shuf -i 10-110 -n1); EXNUM1=$(shuf -i 10-110 -n1); DEFCHARS=15;
  if [[ -z ${1##+(0)} ]]; then
    tr -cd '[:graph:]' < /dev/urandom | fold -w${DEFCHARS} | head -n1;
    >&2 echo -e "\\033[1;4mUsage:\\033[0m\\n\\n    ${FUNCNAME} PASWD_LENGTH (default ${DEFCHARS} chars) PASWD_COUNT (optional, default 1)";
    >&2 echo -e "\\n\\033[1;4mExample:\\033[0m\\n\\n    ${FUNCNAME} ${EXNUM1}    --> would generate a password of ${EXNUM1} characters\\n    ${FUNCNAME} ${EXNUM2} ${EXNUM1} --> would generate ${EXNUM1} passwords of ${EXNUM2} characters";
  elif [[ ${1} == '-h' || ${1} == '--help' ]]; then
    EXNUM1=$(shuf -i 10-110 -n1); EXNUM2=$(shuf -i 10-110 -n1);
    echo -e "\\033[1;4mUsage:\\033[0m\\n\\n    ${FUNCNAME} PASWD_LENGTH (default ${DEFCHARS} chars) PASWD_COUNT (optional, default 1)";
    echo -e "\\n\\033[1;4mExample:\\033[0m\\n\\n    ${FUNCNAME} ${EXNUM1}    --> would generate a password of ${EXNUM1} characters\\n    ${FUNCNAME} ${EXNUM2} ${EXNUM1} --> would generate ${EXNUM1} passwords of ${EXNUM2} characters";
  else
    [[ ${1##+(0)} =~ ^[0-9]+$ ]] && CCOUNT=${1##+(0)};
    [[ ${2##+(0)} =~ ^[0-9]+$ ]] && PCOUNT=${2##+(0)};
    tr -cd '[:graph:]' < /dev/urandom | fold -w${CCOUNT} | head -n${PCOUNT}
  fi
}; alias genpass='generate-password';
