# Shows a graphical ascii-art 'danger' banner with up to 2 lines of text data. 55 characters or less
# does a nice centering job with the custom text data versus the ascii banner. Just one of thoses
# *** don't need, must have, cause me can! *** type of deal. Stone me.
function _showDANGER() {
	local LINE1 LINE2; LINE1="${1}"; LINE2="${2}";
	tput rmam;
	echo -e "\\033[1;38;5;196m  ____________                                ________\\033[0m";
	echo -e "\\033[1;38;5;196m   ______  __ \_____ ______________ _______________  /\\033[0m";
	echo -e "\\033[1;38;5;196m    ____  / / /  __ \`/_  __ \_  __ \`/  _ \_  ___/_  /\\033[0m";
	echo -e "\\033[1;38;5;196m     __  /_/ // /_/ /_  / / /  /_/ //  __/  /    /_/\\033[0m";
	echo -e "\\033[1;38;5;196m      /_____/ \__,_/ /_/ /_/_\__, / \___//_/    (_)\\033[0m";
	echo -e "\\033[1;38;5;196m                            /____/\\033[0m";
	echo -e "\\033[1;38;5;196m       \\033[4mPOTENTIAL DANGER\\033[0m";
	tput smam;
	if [[ ! -z "${LINE1}" ]]; then
		echo -ne "\\n\\033[1;38;5;196m"; printf "%*s\n" $(((${#LINE1}+54)/2)) "$(echo -ne ${LINE1})"; echo -ne "\\033[0m";
		if [[ ! -z "${LINE2}" ]]; then
			echo -ne "\\033[1;38;5;196m"; printf "%*s\n" $(((${#LINE2}+54)/2)) "$(echo -ne ${LINE2})"; echo -e "\\033[0m";
		else echo; fi
	else echo; fi
	sleep 1.75;
}
